#!/bin/bash

function ch_addr
{
	show_banner
	echo -e "[+] Changing IP Address..\n"
	read -p "[*] Enter New IP address >> " getopt
	
	# Validate and change the last occurence of HOST IP from the config file
	if [[ $getopt =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		tac $path/config/recon.conf | sed "0,/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/s//$getopt/" \
		| tac | tee $path/config/recon.conf
		clear
		set_enum_config
		
	else
		echo -e "\n[-] Incorrect IP Address Format."
		sleep 0.75
		ch_addr
	fi
}

function ch_port
{
	show_banner
	echo -e "[+] Changing Port..\n"
	read -p "[*] Enter a desired end port (2-65535) >> " getopt

	# Validate and change the last occurence of PORT from the config file
	if [[ $getopt =~ ^[0-9]{1,5}$ ]]; then
		tac $path/config/recon.conf | sed "0,/PORT=[0-9]\{1,5\}/s//PORT=$getopt/" \
		| tac | tee $path/config/recon.conf
		clear
		set_enum_config
	else
		echo -e "\n[-] Incorrect Port Number specified."
		sleep 0.75
		ch_port
	fi
}

function ch_domain
{
	show_banner
	echo -e "[+] Changing Website Domain..\n"
	read -p "[*] Enter a desired domain name: (i.e. cisco.com) >> " getopt

	# Validate and change the last occurence of the domain from the config file
	if [[ $getopt =~ ^([A-Za-z0-9_-])+(\.[A-Za-z]{2,5})+(\.[A-Za-z]{2,5})?$ ]]; then
		tac $path/config/recon.conf | sed -r "0,/([A-Za-z0-9_-])+(\.[A-Za-z]{2,5})+(\.[A-Za-z]{2,5})?/s//$getopt/" \
		| tac | tee $path/config/recon.conf
		clear
		set_enum_config
	else
		echo -e "\n[-] Incorrect Domain specified."
		sleep 0.75
		ch_domain
	fi
}

function host_err
{
	# Check if configuration file has valid hosts.
	HOSTERR=$(grep -oi '^host=\(\.*\).*' $path/config/recon.conf | wc -l)

    if [[ $HOSTERR -eq 0 ]]; then
        echo -e "[-] ERROR: No hosts detected on the configuration file.
"
		read -p ">> " getopt

		case $getopt in
			*)
				exit 0
				;;
		esac
	
	elif [[ $HOSTERR -ge 2 ]]; then
		echo -e "[-] ERROR: Two or more hosts detected on the configuration file.
"	
		read -p ">> " getopt

		case $getopt in
			*)
				exit 0
				;;
		esac
	fi
}

function port_err
{
	# Check if configuration file has valid ports.
	PORTERR=$(grep -oi '^port=\(\.*\).*' $path/config/recon.conf | wc -l)
	
	if [[ $PORTERR -eq 0 ]]; then
		echo -e "[-] ERROR: No end ports detected on the configuration file.
"
		read -p ">> " getopt
	
		case $getopt in
			*)
				exit 0
				;;
		esac

	elif [[ $PORTERR -ge 2 ]]; then
		echo -e "[-] ERROR: Two or more end ports detected on the configuration file.
"
		read -p ">> " getopt

		case $getopt in
			*)
				exit 0
				;;
		esac
	fi
}

function dom_err
{
	# Check if the configuration file has valid domains.
	DOMERR=$(grep -oi '^domain=\(\.*\).*' $path/config/recon.conf | wc -l)

	if [[ $DOMERR -eq 0 ]]; then
		echo -e "[-] ERROR: No web domain detected on the configuration file.
"
		read -p ">> " getopt

		case $getopt in
			*)
				exit 0
				;;
		esac

	elif [[ $DOMERR -ge 2 ]]; then
		echo -e "[-] ERROR: Two or more web domains detected on the configuration file.
"
		read -p ">> " getopt
		
		case $getopt in
			*)
				exit 0
				;;
		esac
	fi
}

function nmap_err
{
  function check_nmap
  {
    read -p ">> " getopt

    case $getopt in
      *)
        echo
        read -p "[*] Install nmap? [y/N] >> " getopt

        case $getopt in
          ""|[yY]|[yY][eE][sS])
              echo -e "\n[+] Installing nmap..\n"
              sudo apt-get install -y nmap > /dev/null
              
              read -p "[+] Nmap is now installed." getopt

              case $getopt in
                  *)
                    show_menu
                    ;;
              esac
              ;;
          *)
              exit 1
              ;;
      esac
    esac
  }

  # Check if nmap is installed
  if ! command -v nmap &> /dev/null; then
    echo -e "[-] No nmap installed on your machine..\n"
    check_nmap
  fi
}

function enumerate_domain_nosave 
{
	# Download index of target domain
	sleep .25
	echo -e "\n[+] Downloading index.."
	mkdir -p $path/output/$DOMAIN 2>/dev/null
	wget $DOMAIN -O $path/output/$DOMAIN/$DOMAIN.html -q
	sleep .75

	# Get the subdomains captured
	sleep .25
	echo -e "[+] Scraping for subdomains.."
	grep -o '[A-Za-z0-9_\.-]'*$DOMAIN $path/output/$DOMAIN/$DOMAIN.html \
	| sort -u >> $path/output/$DOMAIN/subdomains.$DOMAIN.out
	sleep .75

	# Translate scraped subdomains to IPs
	sleep .25
	echo -e "[+] Capturing IP addresses..\n"
	sleep .75
	for i in $(cat $path/output/$DOMAIN/subdomains.$DOMAIN.out); do host $i; done \
	| grep "has address" | awk '{print $4}' | sort -u

	# Cleaning output directory
	rm -rf $path/output/$DOMAIN

	echo -e "\n[+] Done. 
	"

	read -p ">> " getopt

	case $getopt in
		*)
			clear
			show_menu
			;;
	esac
}

function enumerate_domain_save
{
	# Download index of target domain
	sleep .25
	echo -e "\n[+] Downloading index.."
	mkdir -p $path/output/$DOMAIN 2>/dev/null
	wget $DOMAIN -O $path/output/$DOMAIN/$DOMAIN.html -q
	sleep .75

	# Get the subdomains captured
	sleep .25
	echo -e "[+] Scraping for subdomains.."
	grep -o '[A-Za-z0-9_\.-]'*$DOMAIN $path/output/$DOMAIN/$DOMAIN.html \
	| sort -u >> $path/output/$DOMAIN/subdomains.$DOMAIN.out
	sleep .75

	# Translate scraped subdomains to IPs
	sleep .25
	echo -e "[+] Capturing IP addresses..\n"
	sleep .75
	for i in $(cat $path/output/$DOMAIN/subdomains.$DOMAIN.out); do host $i; done \
	| grep "has address" | awk '{print $4}' | sort -u | tee -a $path/output/$DOMAIN/ip.$DOMAIN.out

	echo -e "\n[+] Done. Data saved on $(realpath ip.$DOMAIN.out)
	"

	read -p ">> " getopt

	case $getopt in
		*)
			clear
			show_menu
			;;
	esac
}

function ping_sweep_nosave
{
    SUBNET=$(echo $HOST | cut -d'.' -f1-3)

    sleep .25
    echo -e "[+] Sweeping the subnet for live hosts..\n"
    sleep .75

    for i in {1..254}; do ping -c1 $SUBNET.$i | tr \\n ' ' | awk '/1 received/ {print Host $2 is up}' & done

	sleep 2
    echo -e "\n[+] Done.
    "

    read -p ">> " getopt

    case $getopt in
        *)
            clear
            show_menu
            ;;
    esac
}

function ping_sweep_save
{
	mkdir -p $path/output/pingsweep
    SUBNET=$(echo $HOST | cut -d'.' -f1-3)

    sleep .25
    echo -e "[+] Sweeping the subnet for live hosts..\n"
    sleep .75
    echo -e "Live Hosts on $SUBNET.0:\n" >> $path/output/pingsweep/subnet.$SUBNET.out

    for i in {1..254}; do ping -c1 $SUBNET.$i | tr \\n ' ' | awk '/1 received/ {print Host $2 is up}' & done \
    | tee -a $path/output/pingsweep/subnet.$SUBNET.out

    echo -e "\n[+] Done. Data saved on $(realpath subnet.$SUBNET.out)
    "

    read -p ">> " getopt

    case $getopt in
        *)
            clear
            show_menu
            ;;
    esac
}

function port_scan_nosave
{
    sleep .25
    echo -e "[+] Scanning for Open Ports..\n"
    sleep .75

    # Check for scanning opts

    if [[ $OPEN -eq 1 ]]; then
        for i in `seq 1 $PORT`; do (echo > /dev/tcp/$HOST/"$i") > /dev/null \
        2>&1 && echo "Port is open: $i"; done
    else
		for i in `seq 1 $PORT`; do (echo > /dev/tcp/$HOST/"$i") > /dev/null \
        2>&1 && echo "Port is open: $i" || echo "Port is closed: $i"; done
    fi

    echo -e "\n[+] Done.
    "

	read -p ">> " getopt
	
	case $getopt in
		*)
			show_menu
			;;
	esac

}

function port_scan_save
{
	mkdir -p $path/output/portscan

    sleep .25
    echo -e "[+] Scanning for Open Ports..\n"
    sleep .75

    # Check for scanning opts

    if [[ $OPEN -eq 1 ]]; then

        echo -e "Open Ports on host $HOST:\n" >> $path/output/portscan/ip-open.$HOST.out

        for i in `seq 1 $PORT`; do (echo > /dev/tcp/$HOST/"$i") > /dev/null \
        2>&1 && echo "Port is open: $i"; done \
        | tee -a $path/output/portscan/ip-open.$HOST.out
    else
		for i in `seq 1 $PORT`; do (echo > /dev/tcp/$HOST/"$i") > /dev/null \
        2>&1 && echo "Port is open: $i" || echo "Port is closed: $i"; done \
        | tee -a $path/output/portscan/ip-open-closed.$HOST.out
		
    fi

    echo -e "\n[+] Done. Data saved on $(realpath ip-open-closed.$HOST.out)
    "

	read -p ">> " getopt

	case $getopt in
		*)  
			show_menu
			;;
	esac
}

function port_scan_warning
{
	read -p "[!] Showing port state generates a huge pile of text. Proceed? [y/N] >> " getopt

        case $getopt in
            [yY]|[yY][eE][sS])
				port_scan
                ;;  
            [nN]|[nN][oO])
                start_port_scan
                ;;  
            *)
                port_scan_warning
                ;;  
        esac
}
